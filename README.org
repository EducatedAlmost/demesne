* æ/Demesne

https://github.com/EducatedAlmost/demesne
Read the blog post: https://blog.almost.education/posts/demesne

https://github.com/gregoryyoung/m-r/blob/master/SimpleCQRS/Domain.cs

What does the application do?


** API

#+begin_src restclient
GET http://localhost:8080/search/3
Content-Type: application/json

{}
#+end_src

#+begin_src restclient
GET http://localhost:8080/create/3
Content-Type: application/json

{"name": "Bar"}
#+end_src

#+begin_src restclient
GET http://localhost:8080/deactivate/3
Content-Type: application/json

{}
#+end_src

#+begin_src restclient
GET http://localhost:8080/reactivate/3
Content-Type: application/json

{}
#+end_src

#+begin_src restclient
GET http://localhost:8080/check-in/3
Content-Type: application/json

{"amount": 45}
#+end_src

#+begin_src restclient
GET http://localhost:8080/check-out/3
Content-Type: application/json

{"amount": 25}
#+end_src

#+begin_src restclient
GET http://localhost:8080/rename/3
Content-Type: application/json

{"name": "Foo"}
#+end_src

** The code

The only datastructures are the command, the event, and the aggregate. Everything else is functions acting upon these datastructures, the first two of which are incredibly simple.

*** Adding new functionality

Let's add a ~reactivate~ function.

- in ~server.clj~ we add a route, ~/reactivate/:id~ and (optionally) we add a helper function ~command/reactivate~ to construct the command.
- we add a handler to ~handler/handle~ for ~:ae.demesne.command.type/reactivate~.
- we add a behaviour to the aggregate, ~item/reactivate~, that creates a ~reactivated~ event.
- we add a application function for that event, ~apply-event :ae.demesne.event.type/item-reactivated~.

*** Why?

1. add an endpoint for user to access
2. convert the user's action into an internal representation of it
3. link the command to an aggregate behaviour
4. raise events for the aggregate behaviour

In this scenario, steps 3 and 4 might seem useless as there is a very simple journey from ~command/reactivate~ ‌→ ~item/reactivate~ → ~event/reactivated~. But in more complex domains, each of these steps becomes necessary. A command can call multiple aggregate behaviours, each of which can raise multiple events, creating a tree of consequences.

- command :: external action or instruction
- behaviour :: the action the aggregate takes in response to external action
- event :: the change in state to the aggregate, following the aggregate's action

*** Repository and event store

The command handler retrieves the aggregate with ~get-by-id~ and saves it, by saving its new events, with ~save~.

The repository uses a bespoke in-memory event store that stores events in an atom categorised by aggregate id. This makes the function to retrieve events very simple.

#+begin_src clojure
(def db (atom {3 [{::item/id 3 ::event/data {...} ::event/version 11}]}))

(defn get-events [id]
  (map ::event/data (get @db id)))
#+end_src

~::event/version~ exists to allow for concurrency checks, should one wish commands to fail if the aggregate has been updated since one last queried its state.

** Usage

Run the project directly, via =:exec-fn=:

#+begin_src
  $ clojure -X:run-x
  Hello, Clojure!
#+end_src


Run the project directly, via =:main-opts= (=-m ae.demesne=):

#+begin_src
  $ clojure -M:run-m
  Hello, World!
#+end_src


Run the project's tests (they'll fail until you edit them):

#+begin_src
  $ clojure -T:build test
#+end_src

Run the project's CI pipeline and build an uberjar (this will fail until you edit the tests to pass):

#+begin_src
  $ clojure -T:build ci
#+end_src

This will produce an updated =pom.xml= file with synchronized
dependencies inside the =META-INF= directory inside =target/classes= and
the uberjar in =target=. You can update the version (and SCM tag)
information in generated =pom.xml= by updating =build.clj=.

If you don't want the =pom.xml= file in your project, you can remove it.
The =ci= task will still generate a minimal =pom.xml= as part of the
=uber= task, unless you remove =version= from =build.clj=.

Run that uberjar:

#+begin_src
  $ java -jar target/demesne-0.1.0-SNAPSHOT.jar
#+end_src

If you remove =version= from =build.clj=, the uberjar will become
=target/demesne-standalone.jar=.

** Next steps

- Add a aggregate behaviour that involves two events.
- Add specs.
